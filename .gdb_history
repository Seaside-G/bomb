q
b phase_3
r ans.txt
q
b phase_3
r ans.txt
r
catch fork
info  inferiors
catch fork
info  inferiors
catch fork

set detach-on-fork off
set follow-fork-mode parent  set detach-on-fork off
r
catch fork
q
catch fork
b phase_3
r ans.txt
q
b phase_3
r ans.txt
r
q
r
q
b phase_3
b explode_bomb
r ans.txt
c
r ans.txt
r ans.txt
c
r
q
r
q
b phase_3
r
b explode_bomb
layout regs
c
c'
c
q
b phase_3
b explode_bomb
r
layout regs
layout rsm
layout asm
layout regs
layout asm
c
q
b phase_2
b phase_3
r
b explode_bomb
c
layout regs
layout regs
layout asm
layout regs
x/s 0x4025cf
x/16x 0x402470
c
c
q
q
r ans.txt
r
q
b phase_4
r ans.txt
q
b phase_3
r ans.txt
b explode_bomb
fsdfds
c
layout asm
q
b phase_4
r
layout regs
c
c
c
c
c
c
c
b phase_3
r ans.txt
r
layout regs
layout asm
layout regs
q
r ans.txt
q
b phase_3
r ans.txt
b explode_bomb
layout asm
layout regs
i register
layout next
layout prev
q
b phase_3
b explode_bomb
r ans.txt
layout regs
c
c
q
b phase_3
b explode_bomb
layout regs
r ans.txt
layout regs
layout asm
layout regs
c
q
b phase_3
b explode_bomb
r ans.txt
layout regs
layout asm
p $rax
stepi
finish
finish
q
b phase_3
b explode_bomb
r ans.txt
layout rsm
layout asm
stepi
finish
q
b phase_3
b explode_bomb
r ans.txt
layout asm
stepi
finish
i $eax
p $eax
stepi
p *(int*)($rsp+0x8)
stepi
p $rax
stepi
q
b phase_3
b explode_bomb
r ans.txt
layout asm
stepi
finish
q
b phase_3
b explode_bomb
r ans.txt
layout asm
stepi
finish
q
bomb
q
b phase_3
b explode_bomb
r ans.txt
layout asm
stepi
finish
p $eax
stepi
p *(int*)(0x402470+8)
q
